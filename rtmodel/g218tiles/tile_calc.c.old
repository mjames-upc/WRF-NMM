#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "geminc.h"
#include "gemprm.h"

#ifdef UNDERSCORE
#define lccbnd lccbnd_
#define gr_snav	gr_snav_
#endif

#define NCOL  9
#define NROW  6

#define MAXI 614
#define MAXJ 428

char proj[]="LCC";
int  kx=MAXI, ky=MAXJ;
float latll = 12.18992;
float lonll = -133.45898;
float latur = 57.32832;
float lonur = -49.41534;
float angl1 = 25;
float angl2 = -95;
float angl3 = 25;
int angflg = 1;

int main(int argc, char *argv[])
{
int i, ier, ioff=0, joff=0;
int igpt, jgpt, icnt, row, col, tilelist[NCOL*NROW];
float x, y, clat, clon, dx, dy, dlat, dlon;
int tilenum[MAXI][MAXJ];
int navsz, nx, ny, imjmf ;
float rnvblk[LLNNAV], xin[5], yin[5], *xout, *yout, *glat, *glon;
char fname[40], line[81];
FILE *fp;
int TILEDOMAIN=0;
static char msys[]="M", gsys[]="G";

if ( argc != 7 )
   {
   printf("usage: %s clat clon nx ny dx dy\n",argv[0]);
   exit(-1);
   }

sscanf ( argv[1], "%f", &clat);
sscanf ( argv[2], "%f", &clon);
sscanf ( argv[3], "%d", &nx);
sscanf ( argv[4], "%d", &ny);
sscanf ( argv[5], "%f", &dx);
sscanf ( argv[6], "%f", &dy);

in_bdta ( &ier );

for ( i=0; i<(NROW*NCOL); i++) tilelist[i] = 0;


imjmf = nx*ny-ny/2;
glat = (float *)malloc(imjmf * sizeof(float));
glon = (float *)malloc(imjmf * sizeof(float));
lccbnd ( &clat, &clon, &nx, &ny, &dx, &dy, glat, glon );

gr_mnav ( proj, &kx, &ky, &latll, &lonll, &latur, &lonur,
	&angl1, &angl2, &angl3, &angflg, rnvblk, &ier,
	strlen(proj));

navsz = LLNNAV;
gr_snav ( &navsz, rnvblk, &ier);

xout = (float *)malloc(imjmf * sizeof(float));
yout = (float *)malloc(imjmf * sizeof(float));
gtrans ( msys, gsys, &imjmf, glat, glon, xout, yout, &ier, strlen(gsys), strlen(msys));

icnt = 1;
for ( i = 1; i <= 54; i++)
   {
   sprintf( fname, "latlon.grid218.%02d\0",i);
   if ( ( fp = fopen(fname, "r") ) != NULL )
      {
      /*printf("processing %s\n",fname);*/
      while ( fgets ( line, 80, fp) != NULL )
         {
         ier = sscanf ( line, "%d %d %f %f", &row, &col, &x, &y);
         if ( ier != 4 ) 
            printf("whoa %s\n",line);
         igpt = ioff + row;
         jgpt = joff + col;
         if ( ( igpt > MAXI ) || ( jgpt > MAXJ ) )
            printf("oops igpt %d [ %d %d ] maxi %d   jgpt %d maxj %d\n",igpt, ioff, row, MAXI, jgpt, MAXJ);
         else if (( igpt < 1 ) || ( jgpt < 1 ) )
            printf("oops igpt %d [ %d %d ] maxi %d   jgpt %d maxj %d\n",igpt, ioff, row, MAXI, jgpt, MAXJ);
         else
	    tilenum[igpt - 1][jgpt - 1] = i;
       

         }

      fclose ( fp );
      }
   icnt++;

   ioff = igpt;
   if ( icnt > NCOL ) 
      {
      ioff = 0;
      joff = jgpt;
      icnt = 1;
      }
   }

for ( i=0; i < imjmf; i++ )
   {
   igpt = (int)xout[i];
   jgpt = (int)yout[i];

   if ( ( igpt < 1 ) || ( igpt > MAXI ) )
      printf("Point outside of tile domain %d %d %f %f\n",igpt,jgpt,glat[i],glon[i]);
   else if ( ( jgpt < 1 ) || ( jgpt > MAXJ ) )
      printf("Point outside of tile domain %d %d %f %f\n",igpt,jgpt,glat[i],glon[i]);
   else
      {
      if ( tilelist[tilenum[igpt][jgpt] - 1]  == 0 ) TILEDOMAIN++;
      tilelist[tilenum[igpt][jgpt] - 1] = 1;
      }
   }

if ( TILEDOMAIN > 0 )
   {
   printf("--tiles ");
   for ( i = 0; i < (NROW*NCOL); i++)
      {
      if ( tilelist[i] > 0 )
         {
         printf("%d",i+1);
         TILEDOMAIN--;
         if ( TILEDOMAIN > 0 ) printf(",");
         }
      }
   printf("\n");
   }
   
}
